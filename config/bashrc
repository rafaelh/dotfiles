# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# == ALL ENVIRONMENTS =========================================================
HISTCONTROL=ignoredups:ignoreboth
HISTIGNORE="&:ls:[bf]g:exit:history"
HISTTIMEFORMAT='%F %T '
HISTSIZE=100
HISTFILESIZE=100
shopt -s histappend
shopt -s checkwinsize
set show-all-if-ambiguous on
export EDITOR=vim
export PAGER=most

# Colour variables to make things pretty
COLOR_RED="\033[0;31m"
COLOR_YELLOW="\033[0;33m"
COLOR_GREEN="\033[0;32m"
COLOR_BOLDGREEN="\033[1;32m"
COLOR_OCHRE="\033[38;5;95m"
COLOR_WHITE="\033[0;37m"
COLOR_RESET="\033[0m"

# Programming Language variables
export NPM_PACKAGES="$HOME/.npm-packages"  # For NPM
export GEM_HOME="$HOME/.gems"              # For Ruby
export GOPATH="$HOME/.go"                  # For Go (User)
export DOTNET_CLI_TELEMETRY_OPTOUT=1       # For C#
export PYENV_ROOT="$HOME/.pyenv"           # For Pyenv
export PATH="$PYENV_ROOT/bin:$PATH"        # For Pyenv
if command -v pyenv 1>/dev/null 2>&1; then # For Pyenv
  eval "$(pyenv init -)"                   # For Pyenv
fi                                         # For Pyenv

# Set the path
PATH=${PATH}:/sbin
PATH=${PATH}:/usr/sbin
PATH=${PATH}:/usr/local/bin
PATH=${PATH}:/usr/local/sbin
PATH=${PATH}:$GEM_HOME/bin
PATH=${PATH}:$NPM_PACKAGES/bin
PATH=${PATH}:$GOPATH/bin
PATH=${PATH}:$HOME/.local/bin
PATH=${PATH}:$HOME/.private/scripts
PATH=${PATH}:$HOME/dotfiles/scripts


# == ALIASES & COLOR ==========================================================
alias rm='rm -i'
alias cp='cp -rfv'
alias free='free -m'
alias wget='wget -c'
alias df='pydf||df -h'
alias path='echo -e ${PATH//:/\\n}'
alias mount='mount | column -t'
alias term='echo $TERM'
alias powershell='pwsh'
alias y='yt-dlp'
alias dropbox='python2 /home/rafael/dotfiles/scripts/dropbox-cli'
alias rebuild-grub='sudo grub-mkconfig -o /boot/grub/grub.cfg'

# Some things have to be run with sudo
alias fdisk='sudo fdisk'
alias blkid='sudo blkid'
alias service='sudo service'
alias dmesg='sudo dmesg'
alias systemctl='sudo systemctl'
alias listeners='sudo ss -antlp'
alias nmap='sudo nmap'
alias veracrypt='sudo veracrypt'

# Enable color support
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias ls='ls -h --color=auto'
alias diff='diff --color=auto'
alias ip='ip --color=auto'

if command -v grc >/dev/null 2>&1; then
    alias nmap='sudo grc nmap'
    alias ping='grc ping'
    alias traceroute='grc traceroute'
    alias dig='grc dig'
    alias netstat='grc netstat'
    alias gcc='grc gcc'
    alias make='grc make'
    alias tcpdump='grc tcpdump'
    alias iptables='grc iptables'
    alias ip6tables='grc ip6tables'
    alias df='pydf||grc df -h'
    alias free='grc free -m'
    alias docker='grc docker'
    alias docker-machine='grc docker-machine'
    alias env='grc env'
    alias id='grc id'
    alias lsmod='grc lsmod'
    alias uptime='grc uptime'
    alias last='grc last'
    alias whois='grc whois'
fi

# Load directory list color profiles
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Enable Colours when using 'less'
export LESS_TERMCAP_mb=$'\e[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\e[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\e[0m'           # end mode
export LESS_TERMCAP_se=$'\e[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\e[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\e[0m'           # end underline
export LESS_TERMCAP_us=$'\e[04;38;5;146m' # begin underline

# Make 'less' more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"


# === ENVIRONMENT-SPECIFIC SETTINGS ===========================================
# Mac
if [[ `uname -s` == Darwin ]]; then

    echo -ne $COLOR_BOLDGREEN">>> "$COLOR_RESET; echo "OSX"

    # Mac Shell Variables
    export BASH_SILENCE_DEPRECATION_WARNING=1
    export HOMEBREW_NO_ANALYTICS=1
    export CLICOLOR=1
    export LSCOLORS='GxfxcxdxCxDxegedabagacad'

    # Bash completion
    set completion-ignore-case on
    . "${HOMEBREW_PREFIX}/etc/bash_completion" 2>/dev/null

    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Debian / Kali / Ubuntu
if [[ `uname -s` == Linux* ]] && [ ! -f /mnt/c/Windows/System32/wsl.exe ] && [ ! -f /etc/pacman.conf ]; then

    echo -ne $COLOR_BOLDGREEN">>> "$COLOR_RESET; echo "Debian / Kali / Ubuntu"
    alias update='sudo apt update &&       \
                  sudo apt full-upgrade && \
                  sudo apt autoremove'
    PATH=${PATH}:$HOME/dotfiles/scripts/arch-update
    PATH=${PATH}:$HOME/dotfiles/scripts/update-kali
    PATH=${PATH}:$HOME/dotfiles/scripts/recon
fi

# Archlinux
if [ -f /etc/pacman.conf ]; then
    echo -ne $COLOR_BOLDGREEN">>> "$COLOR_RESET; echo "Archlinux"
    export DIFFPROG='meld pacdiff -s'
fi

# WSL
if [ -f /mnt/c/Windows/System32/wsl.exe ]; then

    echo -ne $COLOR_BOLDGREEN">>> "$COLOR_RESET; echo "Windows Subsystem for Linux"
    alias update='sudo apt update &&       \
                  sudo apt full-upgrade && \
                  sudo apt autoremove'
fi


# == Functions ================================================================
function vim () {
    # Run vim with sudo privileges if uneditable
    if [ ! -f $1 ] || [ -w $1 ]; then /usr/bin/vim $@;
    else sudo /usr/bin/vim $@;
    fi
}

function title {
    # Set the title of the terminal
    if [ -z "$1" ]
        then
            title=${PWD##*/} # current directory
        else
            title=$1 # first param
        fi
        echo -n -e "\033]0;$title\007"
}

function git_color {
    local git_status="$(git status 2> /dev/null)"
    
    if [[ ! $git_status =~ "clean"  ]]; then
        echo -e $COLOR_RED
    elif [[ $git_status =~ "Your branch is ahead of" ]]; then
        echo -e $COLOR_YELLOW
    elif [[ $git_status =~ "nothing to commit" ]]; then
        echo -e $COLOR_GREEN
    else
        echo -e $COLOR_OCHRE
  fi
}

function git_branch {
    local git_status="$(git status 2> /dev/null)"
    local on_branch="On branch ([^${IFS}]*)"
    local on_commit="HEAD detached at ([^${IFS}]*)"

    if [[ $git_status =~ $on_branch ]]; then
        local branch=${BASH_REMATCH[1]}
        echo " ($branch)"
    elif [[ $git_status =~ $on_commit ]]; then
        local commit=${BASH_REMATCH[1]}
       echo " ($commit)"
    fi
}


# === Set a colour prompt =====================================================
PS1RED="\[\e[0;31m\]"
PS1GREEN="\[\e[0;32m\]"
PS1YELLOW="\[\e[0;33m\]"
PS1BOLDGREEN="\[\e[1;32m\]"
PS1ENDCOLOR="\[\e[0m\]"

PS1BLUE="\[\e[0;36m\]"
PS1PURPLE="\[\e[0;35m\]"
PS1BOLDBLUE="\[\e[1;34m\]"

if [ "$HOSTNAME" == JMF-HNFJVWK374 ]; then
    PS1="$PS1BLUE\u$PS1BOLDBLUE@$PS1BLUE\h $PS1BOLDBLUE($PS1PURPLE\w$PS1BOLDBLUE)$PS1ENDCOLOR"
else
    PS1="$PS1GREEN\u$PS1BOLDGREEN@$PS1GREEN\h $PS1BOLDGREEN($PS1YELLOW\w$PS1BOLDGREEN)$PS1ENDCOLOR"
fi

# Add git branch and status
PS1+="\[\$(git_color)\]"
PS1+="\$(git_branch)\[$COLOR_RESET\] "


# == Finish up ================================================================
export PATH

# Run private commands script
if [ -f $HOME/.private/scripts/private_bash_settings ]; then
    . $HOME/.private/scripts/private_bash_settings
else
    echo -ne $COLOR_YELLOW">>> "$COLOR_RESET; echo "Private settings repo not available"
fi
