#!/usr/bin/env python3

import json
import csv
import sys

def flatten_json(y):
    out = {}

    def flatten(x, name=''):
        if type(x) is dict:
            for a in x:
                flatten(x[a], name + a + '_')
        elif type(x) is list:
            i = 0
            for a in x:
                flatten(a, name + str(i) + '_')
                i += 1
        else:
            out[name[:-1]] = x

    flatten(y)
    return out

def json_to_csv(json_file_path, csv_file_path):
    try:
        # Read the JSON file
        with open(json_file_path, 'r') as json_file:
            data = json.load(json_file)

        # Ensure the data is a list of dictionaries
        if isinstance(data, dict):
            data = [data]
        elif not isinstance(data, list):
            raise ValueError("JSON file must contain a list of objects or a single object.")

        # Flatten the JSON objects
        flattened_data = [flatten_json(item) for item in data]

        # Get the headers for the CSV from the keys of the first flattened dictionary
        headers = flattened_data[0].keys()

        # Write the CSV file
        with open(csv_file_path, 'w', newline='') as csv_file:
            writer = csv.DictWriter(csv_file, fieldnames=headers)
            writer.writeheader()
            for row in flattened_data:
                writer.writerow(row)

        print(f"Successfully converted {json_file_path} to {csv_file_path}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python json_to_csv.py <input_json_file> <output_csv_file>")
    else:
        json_file_path = sys.argv[1]
        csv_file_path = sys.argv[2]
        json_to_csv(json_file_path, csv_file_path)

